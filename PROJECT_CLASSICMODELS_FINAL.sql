NAME - PRATHMESH BHUKELE
ROLL - S6114
PROJECT - CLASSICMODELS


SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERDETAILS;
SELECT DISTINCT ORDERNUMBER FROM ORDERS;

-- 1. Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.  

-- SELECT * FROM CUSTOMERS;
-- SELECT * FROM ORDERDETAILS;
-- SELECT DISTINCT ORDERNUMBER FROM ORDERS;

SELECT DISTINCT C.CUSTOMERNAME , COUNT(*) AS COUNTOFORDERS
FROM CUSTOMERS C
INNER JOIN ORDERS O USING(CUSTOMERNUMBER)
-- INNER JOIN ORDERDETAILS OD USING(ORDERNUMBER) 
GROUP BY C.CUSTOMERNAME 
ORDER BY COUNTOFORDERS DESC 
LIMIT 10;

-- 2. Retrieve the list of customers who have placed orders but haven't made any payments yet.

SELECT o.customernumber
FROM orders o 
WHERE o.customernumber NOT IN (SELECT distinct Customernumber 
							   FROM Orders O
							   WHERE O.customernumber IN (SELECT distinct p.customernumber from PAYMENTS P));
                               
-- 3. Retrieve a product that has been ordered the least number of times. Display the product code, product name, and the number of times it has been ordered.

/*SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT DISTINCT PRODUCTCODE FROM ORDERDETAILS;
*/

(SELECT DISTINCT(O.PRODUCTCODE),P.PRODUCTNAME,COUNT(O.QUANTITYORDERED) AS QUANTITYORDERED1 FROM ORDERDETAILS O
INNER JOIN PRODUCTS P USING(PRODUCTCODE)
GROUP BY O.PRODUCTCODE 
ORDER BY QUANTITYORDERED1 ASC);


 /*4. Classic Models has a product line called "Vintage Cars." 
 management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December). Write a MySQL stored procedure that takes no input parameters and returns total revenue of the  "Vintage Cars" product line for the last quarter of 2003.*/
 
SELECT * FROM ORDERS;
SELECT * FROM PRODUCTLINES;
SELECT * FROM PRODUCTS;
SELECT * FROM ORDERDETAILS;

-- CASE 1
DELIMITER $$
CREATE PROCEDURE REVENUE_GENERATED_1()
BEGIN 
		(SELECT SUM(PRICEEACH * QUANTITYORDERED) AS TOTAL_REVENUE 
        FROM ORDERDETAILS 
        INNER JOIN PRODUCTS USING(PRODUCTCODE)
        INNER JOIN PRODUCTLINES USING(PRODUCTLINE)
        INNER JOIN ORDERS USING(ORDERNUMBER)
		WHERE PRODUCTLINE = 'Vintage Cars'
		AND ORDERDATE >= '2003-10-01' AND ORDERDATE <= '2003-12-31');
END $$
DELIMITER ;

CALL REVENUE_GENERATED_1()

-- CASE 2
DELIMITER $$
CREATE PROCEDURE REVENUE_GENERATED_2()
BEGIN
    SELECT SUM(P.AMOUNT) AS TOTAL_REV
    FROM PAYMENTS P
    JOIN ORDERS O USING(CUSTOMERNUMBER)
    JOIN ORDERDETAILS OD USING(ORDERNUMBER)
    JOIN PRODUCTS PR USING(PRODUCTCODE)
    JOIN PRODUCTLINES USING(PRODUCTLINE)
    WHERE PRODUCTLINE = 'Vintage Cars'
	AND PAYMENTDATE >= '2003-10-01' AND PAYMENTDATE <= '2003-12-31';
END $$
DELIMITER ;

CALL REVENUE_GENERATED_2()

DROP PROCEDURE REVENUE_GENERATED_2;


-- 5. Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers along with their total order values across all orders.

WITH Top_5_Cus_CTE
AS 
(
	SELECT distinct C.customernumber, C.customername,
    SUM(OD.priceEach * OD.quantityordered) OVER (PARTITION BY customernumber) AS Total_Amount
    FROM Customers C 
    INNER JOIN Orders O Using(Customernumber)
    INNER JOIN Orderdetails OD using(ordernumber)
    ORDER BY Total_Amount DESC
    LIMIT 5)
    
SELECT * FROM Top_5_Cus_CTE;


# Job mil jayega bhai
