
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERDETAILS;
SELECT DISTINCT ORDERNUMBER FROM ORDERS;

-- 1. Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.  

-- SELECT * FROM CUSTOMERS;
-- SELECT * FROM ORDERDETAILS;
-- SELECT DISTINCT ORDERNUMBER FROM ORDERS;

SELECT DISTINCT C.CUSTOMERNAME , COUNT(*) AS COUNTOFORDERS
FROM CUSTOMERS C
INNER JOIN ORDERS O USING(CUSTOMERNUMBER)
-- INNER JOIN ORDERDETAILS OD USING(ORDERNUMBER) 
GROUP BY C.CUSTOMERNAME 
ORDER BY COUNTOFORDERS DESC 
LIMIT 10;

-- 2. Retrieve the list of customers who have placed orders but haven't made any payments yet.

SELECT o.customernumber
FROM orders o 
WHERE o.customernumber NOT IN (SELECT distinct Customernumber 
							   FROM Orders O
							   WHERE O.customernumber IN (SELECT distinct p.customernumber from PAYMENTS P));
                               
-- 3. Retrieve a product that has been ordered the least number of times. Display the product code, product name, and the number of times it has been ordered.

/*SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT DISTINCT PRODUCTCODE FROM ORDERDETAILS;
*/

(SELECT DISTINCT(O.PRODUCTCODE),P.PRODUCTNAME,COUNT(O.QUANTITYORDERED) AS QUANTITYORDERED1 FROM ORDERDETAILS O
INNER JOIN PRODUCTS P USING(PRODUCTCODE)
GROUP BY O.PRODUCTCODE 
ORDER BY QUANTITYORDERED1 ASC);


 /*4. Classic Models has a product line called "Vintage Cars." 
 management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December). Write a MySQL stored procedure that takes no input parameters and returns total revenue of the  "Vintage Cars" product line for the last quarter of 2003.*/
 
SELECT * FROM ORDERS;
SELECT * FROM PRODUCTLINES;
SELECT * FROM PRODUCTS;
SELECT * FROM ORDERDETAILS;

-- CASE 1
DELIMITER $$
CREATE PROCEDURE REVENUE_GENERATED_1()
BEGIN 
		(SELECT SUM(PRICEEACH * QUANTITYORDERED) AS TOTAL_REVENUE 
        FROM ORDERDETAILS 
        INNER JOIN PRODUCTS USING(PRODUCTCODE)
        INNER JOIN PRODUCTLINES USING(PRODUCTLINE)
        INNER JOIN ORDERS USING(ORDERNUMBER)
		WHERE PRODUCTLINE = 'Vintage Cars'
		AND ORDERDATE >= '2003-10-01' AND ORDERDATE <= '2003-12-31');
END $$
DELIMITER ;

CALL REVENUE_GENERATED_1()

-- CASE 2
DELIMITER $$
CREATE PROCEDURE REVENUE_GENERATED_2()
BEGIN
    SELECT SUM(P.AMOUNT) AS TOTAL_REV
    FROM PAYMENTS P
    JOIN ORDERS O USING(CUSTOMERNUMBER)
    JOIN ORDERDETAILS OD USING(ORDERNUMBER)
    JOIN PRODUCTS PR USING(PRODUCTCODE)
    JOIN PRODUCTLINES USING(PRODUCTLINE)
    WHERE PRODUCTLINE = 'Vintage Cars'
	AND PAYMENTDATE >= '2003-10-01' AND PAYMENTDATE <= '2003-12-31';
END $$
DELIMITER ;
CALL REVENUE_GENERATED_2()
DROP PROCEDURE REVENUE_GENERATED_2;


-- 5. Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers along with their total order values across all orders.

WITH Top_5_Cus_CTE
AS 
(
	SELECT distinct C.customernumber, C.customername,
    SUM(OD.priceEach * OD.quantityordered) OVER (PARTITION BY customernumber) AS Total_Amount
    FROM Customers C 
    INNER JOIN Orders O Using(Customernumber)
    INNER JOIN Orderdetails OD using(ordernumber)
    ORDER BY Total_Amount DESC
    LIMIT 5)
    
SELECT * FROM Top_5_Cus_CTE;

# 6 Compute the commission for each sales representative, assuming the commission is 5% of the value of an order. Sort by employee last name and first name.

SELECT 
    e.lastName AS Last_Name,
    e.firstName AS First_Name,
    o.orderNumber AS Order_Number,
    o.orderDate AS Order_Date,
    SUM(od.priceEach * od.quantityOrdered) AS Order_Value,
    (SUM(od.priceEach * od.quantityOrdered) * 0.05) AS Commission
FROM
    employees e
JOIN
    customers c ON e.employeeNumber = c.salesRepEmployeeNumber
JOIN
    orders o ON c.customerNumber = o.customerNumber
JOIN
    orderdetails od ON o.orderNumber = od.orderNumber
WHERE
    e.jobTitle = 'Sales Rep'
GROUP BY
    e.employeeNumber, o.orderNumber
ORDER BY
    Last_Name, First_Name, Order_Number;

# 7 What is the quantity on hand for products listed on 'On Hold' orders?

SELECT O.Ordernumber, P.Productcode, P.ProductName, P.ProductLine, O.STATUS
FROM Orders O 
INNER JOIN Orderdetails OD USING(oRDERnUMBER)
INNER JOIN PRODUCTS P Using(ProductCode)
WHERE O.Status regexp 'ON Hold';

# 8 Reports those products that have been sold with a markup of 100% or more (i.e.,  the priceEach is at least twice the buyPrice)

SELECT  OD.Ordernumber,ProductCode, productName, ProductLine, BuyPrice, od.priceEach , MSRP
FROM products p
INNER JOIN Orderdetails OD using(ProductCode)
WHERE PriceEach >= (buyprice*2)  
having buyPrice < (OD.PRICEEACH ) 
ORDER BY MSRP ASC;

# 9 Are there any products that appear on all orders?

SELECT DISTINCT p.productCode, p.productName
FROM products p
WHERE NOT EXISTS (
    SELECT o.orderNumber
    FROM orderdetails od
    LEFT JOIN orders ord ON od.orderNumber = ord.orderNumber
    WHERE ord.status = 'Shipped'  -- You can adjust the status as needed
    AND p.productCode NOT IN (
        SELECT od.productCode
        FROM orderdetails od
        WHERE od.orderNumber = o.orderNumber
    )
);

# 10 List the names of customers and their corresponding order number where a particular order from that customer has a value greater than $25,000?

SELECT C.CustomerNumber, C.Customername, O.OrderNumber, Sum(OD.QuantityOrdered * PriceEach) as Customer_total_Order_value
FROM Orderdetails OD 
INNER JOIN Orders O using(OrderNumber)
INNER JOIN Customers C using(Customernumber)
group by 1,2,3
HAVING  Customer_total_Order_value > 25000
ORDER BY Customer_total_Order_value ASC;